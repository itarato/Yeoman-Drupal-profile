/**
 * @file
 *
 * Yeoman Drupal profile generator definition.
 * Creates Drupal 6/7/8 profiles with basic configuration.
 */

'use strict';

/**
 * Yeoman generator module.
 *
 * @type {function(): Environment|exports}
 */
var generators = require('yeoman-generator');

// Extend the base class.
module.exports = generators.Base.extend({

  /**
   * Constructor.
   */
  constructor: function () {
    generators.Base.apply(this, arguments);
  },

  /**
   * Stage callback: prompting.
   */
  prompting: function () {
    var asyncWait = this.async();

    var questions = [{
      name: 'machineName',
      message: 'Machine name'
    }, {
      name: 'profileName',
      message: 'Profile full name'
    }, {
      name: 'profileDescription',
      message: 'Description',
      default: 'Auto-generated by "yo drupal-profile"'
    }, {
      type: 'list',
      name: 'drupalCore',
      message: 'Drupal core version',
      choices: ['Drupal 6', 'Drupal 7', 'Drupal 8'],
      default: 'Drupal 7'
    }, {
      type: 'confirm',
      name: 'inheritBasicProfile',
      message: 'Inherit from "Basic profile"',
      default: false
    }, {
      name: 'theme',
      message: 'Main theme'
    }, {
      type: 'list',
      name: 'adminTheme',
      message: 'Admin theme',
      choices: ['', 'stanley', 'adminimal_theme', 'seven', 'rubik', 'cube'],
      default: 'adminimal_theme'
    }, {
      type: 'checkbox',
      name: 'modules',
      message: 'Modules',
      choices: [
        'devel', 'views', 'entity', 'admin_menu',
        'token', 'pathauto', 'date', 'features', 'panels'
      ]
    }];

    // Prompt the user.
    this.prompt(questions, function ( answers ) {
      this.profileName = answers.profileName;
      this.machineName = answers.machineName;
      this.profileDescription = answers.profileDescription;
      this.drupalCore = answers.drupalCore;
      this.inheritBasicProfile = answers.inheritBasicProfile;
      this.theme = answers.theme;
      this.adminTheme = answers.adminTheme;
      this.modules = answers.modules;

      switch (this.drupalCore) {
        case 'Drupal 6':
          this.origModuleName = 'default';
          break;

        default:
          this.origModuleName = this.inheritBasicProfile ? 'standard' : 'minimal';
          break;
      }
      this.origModuleNameUcfirst = this.origModuleName[0].toUpperCase() + this.origModuleName.slice(1);
      this.machineNameUcfirst = this.machineName[0].toUpperCase() + this.machineName.slice(1);

      asyncWait();
    }.bind(this));
  },

  /**
   * Create the file structure: copy files and folders.
   */
  generateStructure: function () {
    // Create profile folder.
    this.mkdir(this.machineName);

    // Depending on the core version execute the file copy operations.
    switch (this.drupalCore) {
      case 'Drupal 6':
        this._copyFiles([['default.profile', this.machineName + '.profile']]);
        break;

      case 'Drupal 7':
        this._copyFiles([
          [this.origModuleName + '.profile', this.machineName + '.profile'],
          [this.origModuleName + '.info', this.machineName + '.info'],
          [this.origModuleName + '.install', this.machineName + '.install']
        ]);
        this._copyFolders(['translations']);
        break;

      case 'Drupal 8':
        this._copyFolders(['config']);
        this._copyFiles([
          [this.origModuleName + '.profile', this.machineName + '.profile'],
          [this.origModuleName + '.info.yml', this.machineName + '.info.yml'],
          [this.origModuleName + '.install', this.machineName + '.install'],
          ['src/Tests/' + this.origModuleNameUcfirst + 'Test.php', 'src/Tests/' + this.machineNameUcfirst + 'Test.php'],
          ['config/install/system.theme.yml', 'config/install/system.theme.yml']
        ]);

        if (this.origModuleName == 'standard') {
          this._copyFiles([[this.origModuleName + '.links.menu.yml', this.machineName + '.links.menu.yml']]);
        }
        break;
    }
  },

  /**
   * Copy files with templating.
   *
   * @param fileNames
   *  Array of array of file source paths and destination paths:
   *  [
   *    [oldfile.php, newfile.php]
   *  ]
   * @private
   */
  _copyFiles: function( fileNames ) {
    try {
      var generator = this;
      fileNames.forEach(function (fileName) {
        generator.template(generator.drupalCore + '/' + generator.origModuleName + '/' + fileName[0], generator.machineName + '/' + fileName[1]);
      });
    } catch (e) {
      this.log('Files cannot be copied.', fileNames, e);
    }
  },

  /**
   * Copy folders.
   *
   * @param folderNames
   *  Array of folder names.
   * @private
   */
  _copyFolders: function (folderNames) {
    try {
      var generator = this;
      folderNames.forEach(function (folderName) {
        generator.directory(generator.drupalCore + '/' + generator.origModuleName + '/' + folderName, generator.machineName + '/' + folderName);
      });
    } catch (e) {
      this.log('Folder cannot be copied.', folderNames, e);
    }
  }

});
